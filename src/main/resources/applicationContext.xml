<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/cache 
		http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://www.springframework.org/schema/task 
		http://www.springframework.org/schema/task/spring-task-3.2.xsd"
	default-lazy-init="true">

	<!-- 属性占位符（读取Properties配置文件） -->
	<!-- location：位置 -->
	<!-- ignore-resource-not-found：是否忽略不存在的资源（资源：配置项，键值对中的值） -->
	<!-- ignore-unresolvable：是否忽略无法解析的配置项 -->
	<context:property-placeholder location="classpath:/p2p.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath*:/qqconnectconfig.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
	
	<!-- 扫描组件（扫描所有需要注入的组件） -->
	<context:component-scan base-package="com.iclnetwork">
		<!-- 例外 -->
		<!-- type：类型 -->
		<!-- expression：表达式 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!--
	c3p0 数据源
	destroy-method：销毁时调用方法
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		驱动Class
		<property name="driverClass" value="${jdbc.driver}" />
		URL
		<property name="jdbcUrl" value="${jdbc.url}" />
		用户名
		<property name="user" value="${jdbc.username}" />
		密码
		<property name="password" value="${jdbc.password}" />
		初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default：3
		<property name="initialPoolSize" value="${connection_pools.initial_pool_size}" />
		连接池中保留的最小连接数。
		<property name="minPoolSize" value="${connection_pools.min_pool_size}" />
		连接池中保留的最大连接数。Default：15
		<property name="maxPoolSize" value="${connection_pools.max_pool_size}" />
		最大空闲时间，60秒内未使用则连接被丢弃，若为0则永不丢弃。Default：0
		<property name="maxIdleTime" value="${connection_pools.max_idle_time}" />
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default：3
		<property name="acquireIncrement" value="${connection_pools.acquire_increment}" />
		当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，Default：0
		<property name="checkoutTimeout" value="${connection_pools.checkout_timeout}" />
	</bean>
	-->
	
	<!-- BoneCP 数据源 -->
	<!-- destroy-method：销毁时调用方法 -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 连接池URL -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 数据库用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 数据库密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriodInMinutes" value="${bonecp.idle_connection_test_period_in_minutes}" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAgeInMinutes" value="${bonecp.idle_max_age_in_minutes}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${bonecp.max_connections_per_partition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${bonecp.min_connections_per_partition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${bonecp.partition_count}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${bonecp.acquire_increment}" />
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="${bonecp.statements_cache_size}" />
		<!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<property name="releaseHelperThreads" value="${bonecp.release_helper_threads}" />
		<!-- 获取连接的时候最大的等待时间，默认值为：Long.MAX_VALUE -->
		<property name="connectionTimeoutInMs" value="${bonecp.connection_timeout_in_ms}" />
	</bean>

	<!-- 配置 JPA 实体管理器工厂 -->
	<!-- 用于创建会话/实体管理器的工厂类 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">

		<!-- 用于指定Spring定义的数据源。 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 用于指定JPA配置文件，对于多JPA配置文件情况请选择设置persistenceUnitManager属性来解决。 -->
		<property name="persistenceXmlLocation" value="classpath*:/persistence.xml" />
		<!-- 用于指定持久化单元名称。 -->
		<property name="persistenceUnitName" value="persistenceUnit" />

		<!-- 用于设置JPA实现厂商的特定属性，如设置hibernate的是否自动生成DDL的属性generateDdl，这些属性是厂商特定的，因此最好在这里设置。 -->
		<!-- 目前Spring提供HibernateJpaVendorAdapter，OpenJpaVendorAdapter，EclipseJpaVendorAdapter，TopLinkJpaVenderAdapter四个实现。 -->
		<!-- 其中最主要的属性是“database”，用来指定使用的数据库类型。 -->
		<!-- 从而根据数据库类型决定如何将数据库特定异常转换为Spring一致性异常。 -->
		<!-- 目前支持以下数据库：DB2，DERBY，H2，HSQL，INFORMIX，MYSQL，ORACLE，POSTGRESQL，SQL_SERVER，SYBASE -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 是否显示SQL -->
				<property name="showSql" value="false" />
				<!-- 是否自动生成DDL（数据库定义语言） -->
				<property name="generateDdl" value="false" />
				<!-- 数据库类型
				<property name="database" value="MYSQL"/>
				-->
			</bean>
		</property>

		<!-- 指定JPA属性。 -->
		<!-- 如Hibernate中指定是否显示SQL的“hibernate.show_sql”属性，对于jpaProperties设置的属性自动会放进jpaPropertyMap中。 -->
		<property name="jpaProperties">
			<props>
				<!-- SQL方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 设置注释命名策略 -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>

				<!-- Hibernate 二级缓存 -->
				<!-- 是否启用二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<!-- 二级缓存区域 -->
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<!-- 是否允许查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>

				<!-- 指定JDBC抓取数量的大小，非零值（调用Statement.setFetchSize()） -->
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<!-- 允许Hibernate使用JDBC2的批量更新，非零值，取值 建议取5到30之间的值 -->
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>

				<!-- 设置JDBC事务隔离级别。 -->
				<!-- 查看java.sql.Connection来了解各个值的具体意义，但请注意多数数据库都不支持所有的隔离级别。 -->
				<!-- 取值 1, 2, 4, 8 -->
				<prop key="hibernate.connection.isolation">2</prop>

				<!-- Error applying BeanValidation relational constraints。 -->
				<!-- 解决办法：由于javax.persistence.validation.mode的属性值默认是auto，所以会出错。在hibernate.cfg.xml里将javax.persistence.validation.mode设置为none，就可以避免出错了。 -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<!-- JPA 实体管理器工厂（转交事务管理给Spring） -->
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用注解方式定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置缓存集成 -->
	<cache:annotation-driven cache-manager="cacheManager" />

	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="java.lang.System" />
		<property name="targetMethod" value="setProperty" />
		<property name="arguments">
			<list>
				<value>system.project_name</value>
				<value>${system.project_name}</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置memcached缓存服务 -->
	<bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean">
	    <property name="servers" value="${memcached.host}:${memcached.port}"/>
	    <property name="protocol" value="BINARY"/>
	    <property name="transcoder">
	      <bean class="net.spy.memcached.transcoders.SerializingTranscoder">
	        <property name="compressionThreshold" value="1024"/>
	      </bean>
	    </property>
	    <property name="opTimeout" value="1000"/>
	    <property name="timeoutExceptionThreshold" value="1998"/>
	    <property name="hashAlg">
	    	<value type="net.spy.memcached.DefaultHashAlgorithm">KETAMA_HASH</value>
	    </property>
	    <property name="locatorType" value="CONSISTENT"/> 
	    <property name="failureMode" value="Redistribute"/>
	    <property name="useNagleAlgorithm" value="false"/>
	</bean>

	<!-- 配置缓存管理 -->
	<bean id="cacheManager" class="com.iclnetwork.web.cache.MemcachedCacheManager">
		<property name="cacheManager" ref="memcachedClient" />
	</bean>

	<!-- 配置Freemarker管理 -->
	<bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<!-- 模板路径 -->
		<property name="templateLoaderPaths" value="${template.loader_path}" />

		<!-- Freemarker设置 -->
		<property name="freemarkerSettings">
			<props>
				<prop key="defaultEncoding">${template.encoding}</prop>
				<prop key="url_escaping_charset">${url_escaping_charset}</prop>
				<prop key="locale">${locale}</prop>
				<prop key="template_update_delay">#{T(com.iclnetwork.web.util.ConvertUtils).toTernary(${system.development}, 0, ${template.update_delay})}</prop>
				<prop key="tag_syntax">auto_detect</prop>
				<prop key="whitespace_stripping">true</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="number_format">${template.number_format}</prop>
				<prop key="boolean_format">${template.boolean_format}</prop>
				<prop key="datetime_format">${template.datetime_format}</prop>
				<prop key="date_format">${template.date_format}</prop>
				<prop key="time_format">${template.time_format}</prop>
				<prop key="object_wrapper">freemarker.ext.beans.BeansWrapper</prop>
			</props>
		</property>

		<!-- Freemarker变量 -->
		<property name="freemarkerVariables">
			<map>
				<!-- 系统信息 -->
				<entry key="systemName" value="${system.name}" />
				<entry key="systemVersion" value="${system.version}" />
				<entry key="systemDescription" value="${system.description}" />
				<entry key="systemDevelopment" value="#{T(org.apache.commons.lang3.BooleanUtils).toBoolean(${system.development})}" />
				<entry key="systemPowered" value="#{T(org.apache.commons.lang3.BooleanUtils).toBoolean(${system.powered})}" />

				<!-- 基本变量 -->
				<entry key="base" value="#{servletContext.contextPath}" />
				<entry key="locale" value="${locale}" />
				<entry key="setting" value="#{T(com.iclnetwork.web.util.SettingUtils).get()}" />

				<!-- 自定义宏（指令、方法） -->
				<entry key="abbreviate" value-ref="abbreviateMethod" />
				<entry key="convert" value-ref="convertMethod" />
				<entry key="currency" value-ref="currencyMethod" />
				<entry key="dateUtil" value-ref="dateUtilMethod" />
				<entry key="message" value-ref="messageMethod" />
				<entry key="secrecy" value-ref="secrecyMethod" />

				<entry key="ad_position" value-ref="adPositionDirective" />
				<entry key="article_category_children" value-ref="articleCategoryChildrenDirective" />
				<entry key="article_category_root" value-ref="articleCategoryRootDirective" />
				<entry key="comment_list" value-ref="commentListDirective" />
				<entry key="flash_message" value-ref="flashMessageDirective" />
				<entry key="friend_link_list" value-ref="friendLinkListDirective" />
				<entry key="text_friend_link_list" value-ref="textFriendLinkListDirective" />
				<entry key="pagination" value-ref="paginationDirective" />
				
				<entry key="bbsUrl" value="${bbs.url}" />
			</map>
		</property>
	</bean>

	<!-- 配置国际化 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 缓存有效秒数 -->
		<property name="cacheSeconds" value="#{T(com.iclnetwork.web.util.ConvertUtils).toTernary(${system.development}, 0, ${message.cache_seconds})}" />
		<!-- 使用代码作为默认消息 -->
		<property name="useCodeAsDefaultMessage" value="true" />
		<!-- 国际化资源文件 -->
		<property name="basenames">
			<list>
				<value>${message.path}</value>
				<value>${message.account_path}</value>
			</list>
		</property>
	</bean>

	<!-- 配置国际化语言转换 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver">
		<!-- 所在区域（语种） -->
		<property name="defaultLocale" value="${locale}" />
	</bean>

	<!-- 
	配置JCaptcha验证码功能
	<bean id="imageCaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
		<property name="captchaEngine">
			<bean class="com.iclnetwork.web.captcha.GooggleCaptchaEngine" />
		</property>
		验证码过期时间
		<property name="minGuarantedStorageDelayInSeconds" value="3600" />
	</bean>
	 -->
	 
	<!-- 配置Kaptcha验证码引擎 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.textproducer.char.string">ABCDEFGHIJKLMNOPQRSTUVWXYZ3456789</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.font.names">Arial, Bell MT, Credit valley, nyala</prop>
						<!-- 28 * 1.5 * 0.8 -->
						<prop key="kaptcha.textproducer.font.size">34</prop>
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
						<!-- 80 * 1.5 -->
						<prop key="kaptcha.image.width">120</prop>
						<!-- 28 * 1.5 -->
						<prop key="kaptcha.image.height">42</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- 配置SMTP邮件服务 -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
				<prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
				<!--
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				-->
			</props>
		</property>
	</bean>

	<!-- 配置SMTP邮件异步发送 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="${task.core_pool_size}" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="${task.max_pool_size}" />
		<!-- 最大队列数 -->
		<property name="queueCapacity" value="${task.queue_capacity}" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="${task.keep_alive_seconds}" />
	</bean>

	<task:annotation-driven />

</beans>